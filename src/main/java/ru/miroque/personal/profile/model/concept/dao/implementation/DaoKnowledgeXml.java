package ru.miroque.personal.profile.model.concept.dao.implementation;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Default;
import javax.inject.Inject;
import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.jboss.logging.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import ru.miroque.personal.profile.model.concept.dao.DaoKnowledge;
import ru.miroque.personal.profile.model.concept.entity.Knowledge;
import ru.miroque.personal.profile.model.concept.exception.ExceptionBadWorkWithXml;
import ru.miroque.personal.profile.model.concept.exception.ExceptionNotPersisted;

@Default
@ApplicationScoped
public class DaoKnowledgeXml implements DaoKnowledge {
	@Inject
	Logger log;
	private final Document storage;
	private final File storagePath;
	private final Element data;

	@Inject
	public DaoKnowledgeXml(File file) throws ExceptionBadWorkWithXml, SAXException, IOException, ParserConfigurationException {
		storagePath = file;
		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();

		// –û—Ç–∫–ª—é—á–∏–ª –º–æ–º–µ–Ω—Ç —Å –í–ê–õ–ò–î–ê–¶–ò–ï–ô.
		// –ò —Å–∞–º–∞ —Å—Ö–µ–º–∞, –Ω–µ –æ—á–µ–Ω—å –Ω—É–∂–Ω–∞—è –º–Ω–µ, –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä, —Ç–∞–∫ —Å–µ–±–µ –≤ —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.
		// –ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è –µ—â—ë –¥–æ –∫–æ–Ω—Ü–∞.

		// StreamSource streamSource  = new StreamSource (DaoKnowledgeXml.class.getClassLoader().getResourceAsStream("personal-profile.xsd"));
		
         // create schema
		// SchemaFactory xsdFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
		// Schema schema = xsdFactory.newSchema(streamSource);

		// or prohibit the use of all protocols by external entities:
		// documentBuilderFactory.setValidating(true);
		// documentBuilderFactory.setSchema(schema);
		// documentBuilderFactory.setIgnoringElementContentWhitespace(true);
		// documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
		// documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
		// documentBuilderFactory.setIgnoringComments(true);
		DocumentBuilder documentBuilder;
		documentBuilder = documentBuilderFactory.newDocumentBuilder();
		storage = documentBuilder.parse(storagePath);
		storage.getDocumentElement().normalize();
		data = extractNode(storage, "data");
	}

	public static void printDocument(Document doc, OutputStream out) throws IOException, TransformerException {
		TransformerFactory tf = TransformerFactory.newInstance();
		tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
		tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
		Transformer transformer = tf.newTransformer();
		transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
		transformer.setOutputProperty(OutputKeys.METHOD, "xml");
		transformer.setOutputProperty(OutputKeys.INDENT, "yes");
		transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
		transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

		transformer.transform(new DOMSource(doc), new StreamResult(new OutputStreamWriter(out, StandardCharsets.UTF_8)));
	}

	/**
	 * –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–ª–µ–Ω–µ–Ω–∏—è Element(Node).
	 * –ù—É —Ç–∏–ø–∞ <em>-=–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è=-</em>
	 * 
	 * @param document –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–π –º–Ω–µ —É–∑–µ–ª
	 * @param nameOfNode <em>–ò–º—è</em> —É–∑–ª–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á—É –≤–µ—Ä–Ω—É—Ç—å
	 * @return Element(Node) —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º <em>–ò–º–µ–Ω–µ–º</em>
	 * @throws ExceptionBadWorkWithXml
	 */
	private Element extractNode(Document document, String nameOfNode) throws ExceptionBadWorkWithXml {
		Element root = storage.getDocumentElement();
		NodeList nodes = root.getElementsByTagName(nameOfNode);

		if (nodes.getLength() == 1) {
			return (Element) nodes.item(0);
		} else {
			//TODO: replace i18n
			throw new ExceptionBadWorkWithXml("—Ç—É—Ç –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –î–∞—Ç–∞, —á–µ–º –Ω—É–∂–Ω–æ");
		}
	}

	/**
	 * –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –ò–º–µ–Ω–∏ (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é). –¢—Ä–∏
	 * —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å—Å—è:
	 * <ol>
	 *     <li>–Ω–∏ —á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ</li>
	 *     <li>–Ω–∞—à–ª–æ –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ</li>
	 *     <li>–Ω–∞—à–ª–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è</li>
	 * </ol>
	 */
	@Override
	public Collection<Knowledge> findByName(String name) throws XPathExpressionException {
		log.tracev("üî∞[name]‚ñì{0}", name);
		Collection<Knowledge> result = new ArrayList<Knowledge>();

		// Evaluate XPath against Document itself
		XPath xPath = XPathFactory.newInstance().newXPath();
		NodeList nodes = (NodeList) xPath.evaluate("/personal-profile/data/descendant-or-self::knowledge/descendant-or-self::name[contains(text(), '"+name+"')]", data, XPathConstants.NODESET);
		log.tracev("‚ñçnodes.getLength() ‚ñì {0}", nodes.getLength());
		for (int i = 0; i < nodes.getLength(); ++i) {
			Element e = (Element) nodes.item(i);
			// log.tracev("‚ñçe ‚ñì {0}", e);
			log.tracev("‚ñçe.getTagName() ‚ñì {0}", e.getTagName());
			log.tracev("‚ñçe.getTextContent() ‚ñì {0}", e.getTextContent());
			// log.tracev("‚ñçe.getParentNode().getTextContent() ‚ñì {0}", e.getParentNode().getTextContent());
			log.tracev("‚ñçe.getParentNode().getNodeName() ‚ñì {0}", e.getParentNode().getNodeName());
			// log.tracev("‚ñçe.getParentNode().getAttributes().getNamedItem(\"id\") {0}", Long.valueOf(e.getParentNode().getAttributes().getNamedItem("id").getNodeValue()));
			if (e.getParentNode().getNodeName().equals("knowledge")){
				Knowledge item = new Knowledge(
					Long.valueOf(e.getParentNode().getAttributes().getNamedItem("id").getNodeValue()),
					e.getTextContent()
				);
				result.add(item);
			}

		}
		return result;
	}

	/**
	 * –ê —Ç—É—Ç –º–Ω–µ –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –û–¥–∏–Ω –ö–æ–Ω–∫—Ä–µ—Ç—ã–Ω–π —É–∑–µ–ª, –∏ –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å. –ê –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç—É,
	 * —Ç–æ —Å–æ–∑–¥–∞—Ç—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ.
	 */
	@Override
	public void createOrUpdate(Knowledge item) throws ExceptionNotPersisted {
		log.infov("üî∞[item]::{0}", item);
		try {
			XPath xPath = XPathFactory.newInstance().newXPath();
			NodeList nodes = (NodeList) xPath.evaluate("//name[text()='" + item.getName() + "']", data, XPathConstants.NODESET);
			if (nodes.getLength() == 0) {
				generateNewKnowledgeNode(item, data);
				saveXmlFile();
				log.infov("saved new Knowledge::{0}", item);

			} else if (nodes.getLength() == 1) {
				//TODO: replace i18n
				throw new ExceptionNotPersisted("–£–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤ \"–•—Ä–∞–Ω–∏–ª–∏—â–µ\"");
			} else {
				//TODO: replace i18n
				throw new ExceptionNotPersisted("–ù–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ \"–•—Ä–∞–Ω–∏–ª–∏—â–µ\", –≤–æ–æ–±—â–µ-—Ç–æ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç");
			}
		} catch (XPathExpressionException e) {
			//TODO: replace i18n
			throw new ExceptionNotPersisted(e.getMessage());
		}
	}

	/**
	 * –°–æ—Ö—Ä–∞–Ω—è–µ–º –ó–Ω–∞–Ω–∏–µ, –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π "–†–æ–¥–∏—Ç–µ–ª—å"
	 */
	@Override
	public void createOrUpdate(Knowledge parent, Knowledge descendant) throws ExceptionNotPersisted {
		log.infov("üî∞[parent]::{0}", parent);
		log.infov("üî∞[descendant]::{0}", descendant);
		try {
			XPath xPath_Parent = XPathFactory.newInstance().newXPath();
			Node node_Parent = (Node) xPath_Parent.evaluate("/personal-profile/data/descendant-or-self::knowledge[@id=" + parent.getId() + "]", data, XPathConstants.NODE);
			// –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç -- –¥–∞
			log.tracev("üî∏ [node_Parent]::{0}", node_Parent);
			if (node_Parent != null) {
				XPath  xPath_Descendant = XPathFactory.newInstance().newXPath();
				Node node_Descendant = (Node) xPath_Descendant.evaluate("self::*/knowledge[@id=" + descendant.getId() + "]", node_Parent, XPathConstants.NODE);
				// —ç–ª–µ–º–µ–Ω—Ç –ü–æ—Ç–æ–º–æ–∫ -- –¥–∞
				log.tracev("üî∏ [node_Descendant]::{0}", node_Descendant);
				if (node_Descendant != null) {
					log.trace("üè≥Ô∏è descendant is NOT null");
					XPath  xPath_Descendant_Name = XPathFactory.newInstance().newXPath();
					Node node_Descendant_Name = (Node) xPath_Descendant_Name.evaluate("self::*/name", node_Descendant, XPathConstants.NODE);
					log.tracev("üî∏ text from::{0}", node_Descendant_Name.getTextContent());
					node_Descendant_Name.setTextContent(descendant.getName());
					log.tracev("üî∏ text into::{0}", node_Descendant_Name.getTextContent());
				} else {
					log.trace("üè¥ descendant is null");
					generateNewKnowledgeNode(descendant, node_Parent);
				}
				saveXmlFile();
//			} else if (parentNode == null) {
//				//TODO: replace i18n
//				throw new ExceptionNotPersisted("–ù–µ –Ω–∞—à–ª–æ—Å—å —Ç–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ \"–•—Ä–∞–Ω–∏–ª–∏—â–µ\"");
			} else {
				//TODO: replace i18n
				throw new ExceptionNotPersisted("–ù–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç –≤ \"–•—Ä–∞–Ω–∏–ª–∏—â–µ\"");
			}
			//TODO: replace i18n
		} catch (XPathExpressionException e) {
			//TODO: replace i18n
			throw new ExceptionNotPersisted(e.getMessage());
		}
	}

	private void generateNewKnowledgeNode(Knowledge item, Node parentNode) {
		Element childKnowledge = storage.createElement("knowledge");
		childKnowledge.setAttribute("id", item.getId().toString());

		Element name = storage.createElement("name");
		name.appendChild(storage.createTextNode(item.getName()));

		childKnowledge.appendChild(name);

		parentNode.appendChild(childKnowledge);
	}

	/**
	 * <p>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –≤—Å–µ <em>–ó–Ω–∞–Ω–∏—è</em>, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ <em>–•—Ä–∞–Ω–∏–ª–∏—â–µ</em></p>
	 * <p>–ë–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —á–∏—Å—Ç–æ –°–ø–∏—Å–æ–∫</p>
	 */
	@Override
	public Collection<Knowledge> finAllInStorage() {
		log.trace("üö©");
		NodeList itemsRaw = storage.getElementsByTagName("knowledge");
		log.tracev("üî∏ [itemsRaw.size]::{0}", itemsRaw.getLength());
		List<Knowledge> items = new ArrayList<Knowledge>();
		for (int i = 0; i < itemsRaw.getLength(); i++) {
			Knowledge item = new Knowledge();
			Element node = (Element) itemsRaw.item(i);
			item.setId(Long.valueOf(node.getAttributes().getNamedItem("id").getNodeValue()));
			item.setName(node.getElementsByTagName("name").item(0).getTextContent());
			log.tracev("‚ôª üî∏ [item]::{0}", item);
			items.add(item);
		}
		log.trace("üèÅ");
		return items;
	}

	@Override
	public Collection<Knowledge> findAllAtRoot() {
		log.trace("üö©");
		List<Knowledge> items = new ArrayList<Knowledge>();
		try {
			XPath xPath = XPathFactory.newInstance().newXPath();
			NodeList itemsRaw = (NodeList) xPath.evaluate("/personal-profile/data/child::knowledge", data, XPathConstants.NODESET);
			log.tracev("üî∏ [itemsRaw.size]::{0}", itemsRaw.getLength());
			for (int i = 0; i < itemsRaw.getLength(); i++) {
				Knowledge item = new Knowledge();
				Element node = (Element) itemsRaw.item(i);
				item.setId(Long.valueOf(node.getAttributes().getNamedItem("id").getNodeValue()));
				item.setName(node.getElementsByTagName("name").item(0).getTextContent());
				log.tracev("‚ôª üî∏ [item]::{0}", item);
				items.add(item);
			}
		} catch (XPathExpressionException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		// TODO: –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ä–≤–µ—Ä—Ç–∞—Ç–æ—Ä –∏–∑ –ù–æ–¥–æ–≤ –í –ó–Ω–∞–Ω–∏—è
		log.trace("üèÅ");
		return items;
	}

	/**
	 * <p>–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–±–æ—á–∏–π –î–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–∞–π–ª</p>
	 * <p>–ù–æ —Å–∞–º –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç, –∏ –Ω–µ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–º –∏–∑ —Ñ–∞–π–ª–∞</p>
	 * <p>–¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</p>
	 *
	 * @throws ExceptionNotPersisted
	 */
	private void saveXmlFile() throws ExceptionNotPersisted {
		DOMSource source = new DOMSource(storage);
		TransformerFactory factory = TransformerFactory.newInstance();
		factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
		factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
		try {
			Transformer transformer = factory.newTransformer(new StreamSource(getClass().getClassLoader().getResourceAsStream("pretty-print.xslt")));
			StreamResult result = new StreamResult(storagePath);
			transformer.setOutputProperty(OutputKeys.METHOD, "xml");
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
			transformer.transform(source, result);
		} catch (TransformerException e) {
			//TODO: replace i18n
			throw new ExceptionNotPersisted(e.getMessage());
		}
	}

	@Override
	public Collection<Knowledge> findAllAtBranch(Long id) {
		log.trace("üö©");
		List<Knowledge> items = new ArrayList<Knowledge>();
		try {
			XPath xPath = XPathFactory.newInstance().newXPath();
			NodeList itemsRaw = (NodeList) xPath.evaluate("/personal-profile/data/descendant-or-self::knowledge[@id=" + id + "]/descendant::knowledge", data, XPathConstants.NODESET);
			log.tracev("üî∏ [itemsRaw.size]::{0}", itemsRaw.getLength());
			for (int i = 0; i < itemsRaw.getLength(); i++) {
				Knowledge item = new Knowledge();
				Element node = (Element) itemsRaw.item(i);
				item.setId(Long.valueOf(node.getAttributes().getNamedItem("id").getNodeValue()));
				item.setName(node.getElementsByTagName("name").item(0).getTextContent());
				log.tracev("‚ôª üî∏ [item]::{0}", item);
				items.add(item);
			}
		} catch (XPathExpressionException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		// TODO: –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ä–≤–µ—Ä—Ç–∞—Ç–æ—Ä –∏–∑ –ù–æ–¥–æ–≤ –í –ó–Ω–∞–Ω–∏—è
		log.trace("üèÅ");
		return items;
	}

}
